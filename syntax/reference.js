var a = 1;
var b = a;
b = 2;
console.log(a);    // 1

/*
    어떻게 보면 당연하다고 볼 수 있지만 b = a 이기 때문에 a = 2가 된다고 생각할 수도 있다. 이때 '복제'라는 개념을 이해해야 한다. 1행에서 a = 1이라고 선언했고 이는 메모리에 할당된 1이라는 값을 a가 pointing하게 된다. 2행에서 b = a라는 지점에 b는 a를 pointing하는 것이 아니라 a가 가리키고 있는 값을 하나 복제하여 독립적으로 값을 pointing하고 있다. 따라서 b = a라는 것은 독립적으로 값을 하나씩 갖고 있는 것이다. 4행에서 a값을 조회했을 때 값 1은 당연한 것이다. 

    하지만 이는 할당된 값이 '원시 데이터'일 경우에만 '복제'이다.
*/

var a = { id : 1};
var b = a;
b.id = 2;
console.log(a.id);  // 2

/*
    원시 데이터 이외의 모든 데이터 타입은 객체이다. 객체는 다른 말로는 참조 데이터 형이라고도 부른다. 기본 데이터형은 위와 같이 복제되지만 참조 데이터형은 참조된다. 즉 a와 b는 같은 객체를 참조하고 있는 것이다. 
*/

var a = { id : 1};
var b = a;
b = { id : 2};
console.log(a.id);  // 1

/*
    2행까지 b는 a와 같은 객체를 참조하고 있었지만 3행에서 새로운 객체를 b에 할당했다. 여기서 부터는 a와 b는 다른 데이터를 각각 참조하고 있는 것이다. 첫번째 예제에서 원시데이터의 경우에는 2번째 행에서 각각 독립된 데이터를 가리키고 있는 반면, 객체는 2번째 행에서는 같은 객체를 참조하고 있다는 것이 다른점이다. 
*/

var a = 1;          // a = 1
function func(b) {  // b = a
    b = 2;          // b = 2
}
func(a);
console.log(a);     // 1

var a = { id : 1 };
function func(b) {
    b = { id : 2 };
}
func(a);
console.log(a.id);  // 1
 
var a = { id : 1 };
function func(b) {
    b.id = 2;
}
func(a);
console.log(a.id);  // 2

/*
    함수의 인자로서 활용되는 변수도 위에서 살펴본 예제와 같다. 원리를 알면 이해하기 쉽다. 
*/
