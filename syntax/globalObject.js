// this를 이해하기 위한 전초로서 전역객체를 이해 해야한다. 자바스크립트는 어떠한 경우라도 객체지향 언어이다. 
// 전역객체는 특수한 객체로서 모든 객체는 이 전역 객체의 Property이다. 

function func() {
    alert('Hello??');
}

func() // (1)
window.func() // (2)

/*
    (1)과 (2)의 결과는 같다. 즉, 엄밀히 말하자면 func()라는 함수는 window객체의 메소드인 것이다. 하지만 일일이 window라는 것을 직접 코딩해야한다면 매우 불편할 것이다. 따라서 암시적으로 전역객체를 가리키는 window라는 것은 생략해도 된다. 프로그래밍에서 암시적이라는 것은 생략했을 때 기본적으로 무엇이 동작한다는 것이다. 

    따라서 자바스크립트의 모든 함수와 변수는 그것이 전역 변수, 함수라고 할 지라도 사실은 window라는 전역객체의 property라는 것이다. '객체'라는 것에 모든 것이 소속되어 있다. 
*/

var o = {
    'func' : function() {
        alert('Hello?')
    }
}

o.func();
window.o.func();

/*
    ECMAScript에서는 전역객체의 API를 정의해두었다. 전역 변수 또는 함수를 정의하면 이런 API와 같이 본인이 전역객체에 직접 추가한 것이다. 
    하지만 웹브라우저에서의 자바스크립트는 window라는 이름의 전역객체를 사용하는데, 절대적인 것은 아니고 호스트 환경에 따라 달라진다. 즉 웹브라우저가 아닌 서버(like node.js)측 호스트환경에서는 
    window라는 것이 존재하지 않는다. 대신에 global이라는 것이 존재하고 이것은 window와 같은 역할을 한다. 

    즉 당신이 전역객체를 알고있건 모르고있건 사용하고 있는 중이다. 하지만 우리가 객체지향에 대해서 깊게 이해하고자 한다면 전역객체와 같은 암시적인 존재에 대해 분명하게 이해할 필요가 있다. 
*/